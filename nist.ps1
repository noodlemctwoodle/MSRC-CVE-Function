$apiKey = "1d0b1965-7809-470f-818c-2813aec543a1"

# Extract 'name' from the Request parameters, if not available, retrieve it from the Request body
$name = $Request.Query.Name
if (-not $name) {
    $name = $Request.Body.Name
}

# Define function to retrieve and process data from the NIST API
function nistCVE {
    param(
        [Parameter(Mandatory = $true)]
        [string]$name,

        [Parameter(Mandatory = $true)]
        [string]$apiKey
    )

    # Function to convert properties to individual keys
    function ConvertPropertiesToIndividualKeys($metrics) {
        $result = @{}
        $metrics.PSObject.Properties | ForEach-Object {
            $result[$_.Name] = $_.Value
        }
        return $result
    }

    # Make request to the NIST API
    $nist = (Invoke-WebRequest -Uri "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=$name" -Headers @{Accept = "application/json"; Key=$apiKey}).Content | ConvertFrom-Json -Depth 99

    # If no results, return null
    if ($nist.totalResults -eq 0) {
        return $null
    }

    # Process data from the NIST API
    $vulnerability = $nist.vulnerabilities[0]
    $metricsV2 = $vulnerability.cve.metrics.cvssMetricV2[0]
    $metricsV2Properties = ConvertPropertiesToIndividualKeys $metricsV2.cvssData

    # List of additional properties
    $additionalProperties = @("baseSeverity", "exploitabilityScore", "impactScore", "acInsufInfo", "obtainAllPrivilege", "obtainUserPrivilege", "obtainOtherPrivilege", "userInteractionRequired")

    # Add the additional properties to the $metricsV2Properties
    foreach ($property in $additionalProperties) {
        $metricsV2Properties.$property = $metricsV2.$property
    }

    $metricsV31Properties = ConvertPropertiesToIndividualKeys $vulnerability.cve.metrics.cvssMetricV31[0].cvssData

    # Process URLs and tags from references
    $urls = @()
    $tags = @()
    foreach ($reference in $vulnerability.cve.references) {
        $urls += $reference.url
        $tags += $reference.tags
    }
    $urls = $urls | Sort-Object | Get-Unique
    $tags = $tags | Sort-Object | Get-Unique

    # Create a custom object with processed data
    New-Object PSObject -Property ([ordered]@{
        id                      = $vulnerability.cve.id
        baseScore               = $metricsV31Properties.baseScore
        impactScore             = $metricsV2Properties.impactScore
        exploitabilityScore     = $metricsV2Properties.exploitabilityScore
        baseSeverity            = $metricsV2Properties.baseSeverity
        sourceIdentifier        = $vulnerability.cve.sourceIdentifier
        published               = $vulnerability.cve.published
        lastModified            = $vulnerability.cve.lastModified
        vulnStatus              = $vulnerability.cve.vulnStatus
        scope                   = $metricsV31Properties.scope
        referenceTags           = $tags -join ", "
        descriptions            = ($vulnerability.cve.descriptions | Where-Object { $_.lang -eq 'en' })[0].value
        configurations          = $vulnerability.cve.configurations[0].nodes -join ", "
        weaknesses              = ($vulnerability.cve.weaknesses | ForEach-Object { $_.description | Where-Object { $_.lang -eq 'en' } | ForEach-Object { $_.value } }) -join ", "
        accessVector            = $metricsV2Properties.accessVector
        accessComplexity        = $metricsV2Properties.accessComplexity
        attackVector            = $metricsV31Properties.attackVector
        attackComplexity        = $metricsV31Properties.attackComplexity
        authentication          = $metricsV2Properties.authentication
        privilegesRequired      = $metricsV31Properties.privilegesRequired
        acInsufInfoV2           = $metricsV2Properties.acInsufInfo
        obtainAllPrivilege      = $metricsV2Properties.obtainAllPrivilege
        obtainUserPrivilege     = $metricsV2Properties.obtainUserPrivilege
        obtainOtherPrivilege    = $metricsV2Properties.obtainOtherPrivilege
        userInteractionRequired = $metricsV2Properties.userInteractionRequired
        integrityImpact         = $metricsV31Properties.integrityImpact
        availabilityImpact      = $metricsV31Properties.availabilityImpact
        confidentialityImpact   = $metricsV31Properties.confidentialityImpact
        userInteraction         = $metricsV31Properties.userInteraction
        vectorString            = $metricsV31Properties.vectorString
        referenceUrls           = $urls -join ", "  
    })
}

# Retrieve CVE data
$nistCVEObject = nistCVE -name $name -apiKey $apiKey

# Convert CVE data to JSON for output, or give appropriate error messages if data is not available
if ($nistCVEObject) {
    # If data is available, convert it to JSON
    $body = ConvertTo-Json -InputObject $nistCVEObject -Depth 99
} elseif (-not $nistCVEObject) {
    # If no data is available, set the response body to an error message
    $body = "CVE not found"
} else {
    # If the request was not valid, set the response to a No Content HTTP response
    Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
            StatusCode = [HttpStatusCode]::NoContent
            Body       = "No valid CVE provided"
        })
}

# Pass the final response to the output bindings
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
        StatusCode = [HttpStatusCode]::OK
        Body       = $body
    })
