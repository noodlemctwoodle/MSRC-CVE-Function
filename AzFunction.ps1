using namespace System.Net

# Input bindings are passed in via param block.
param($Request, $TriggerMetadata)

$name = $Request.Query.Name
if (-not $name) {
    $name = $Request.Body.Name
}

$date = $Request.Query.Date
if (-not $date) {
    $date = $Request.Body.Date
}

$response = (Invoke-WebRequest ("https://api.msrc.microsoft.com/cvrf/" + $date) -Headers @{Accept = "application/json" }).Content | ConvertFrom-Json -Depth 99

$CVE = $response.Vulnerability | Where-Object CVE -EQ $name

$Exploitability = $cve.Threats | Where-Object Type -EQ 1 | ForEach-Object {
    $exploitDetails = $_.description.value -split ";"
    $exploitHashTable = @{}
    foreach ($detail in $exploitDetails) {
        $keyValue = $detail -split ":", 2
        if ($keyValue.Count -eq 2) {
            $exploitHashTable[$keyValue[0].Trim()] = $keyValue[1].Trim()
        }
    }
    $exploitHashTable
}

$CVEObject = [PSCustomObject]@{
    CVE            = $CVE.CVE
    Title          = $CVE.Title.Value
    Description    = ($cve.Notes.Value -replace "<.*?>", "" -split "\\n" | ForEach-Object { $_.Trim() }) -join "`r`n"
    CVSSBaseScore  = ($cve.CVSSScoreSets | Group-Object -Property BaseScore -NoElement).Name
    Exploitability = $Exploitability
    Mitigations    = ($cve.Remediations | Where-Object type -EQ 1).description.value -replace "<.*?>", "" -replace "\\n","`r`n"
    Revisions      = $cve.RevisionHistory
}

if ($CVEObject) {
    $body = ConvertTo-Json -InputObject $CVEObject -Depth 99
} elseif (-not $CVEObject) {
    $body = "CVE not found"
} else {
    Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
            StatusCode = [HttpStatusCode]::NoContent
            Body       = "No valid CVE provided"
        })
}

# Associate values to output bindings by calling 'Push-OutputBinding'.
Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{
        StatusCode = [HttpStatusCode]::OK
        Body       = $body
    })